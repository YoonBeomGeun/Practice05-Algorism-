Algorism_23.11.28

1. 배열
1) 인덱스로 데이터를 찾을 수도 있고, 데이터로 인덱스를 찾을 수도 있다.
2) Arrays.toString(배열명) - 배열변수가 가르키고 있는 값들을 String으로 만들어서 프린트, for문, for-each문 print
3) Arrays.sort(배열명) - 퀵정렬, 오름차순으로 정렬
4) 정렬을 할 때는 배열 안에 있는 값들을 swap을 통해 자리의 값을 변경할 수 있다.

2. 자료구조
1) 선형구조 - 데이터를 일직선 모양으로 저장하는 방식
- 배열: 고정크기, 보통 같은 타입의 데이터를 모아서 사용하는 경우
- 리스트: 가변크기, 보통 같은 타입을 사용하기도 함
	<사용하고자하는 타입> -> List<String>. List<Integer>
	<기본형 X>,<클래스명 O> -> 참조형만 <>안에 쓸 수 있다.
- 스택: 웅덩이 저장방식, 아래가 막혀있음, LIFO(후입선출)
       먼저 저장구조에 들어온 데이터가 가장 마지막에 삭제되는 특징을 가짐, 위, 아래(top/bottom)의 개념
- 큐: 대기줄 저장방식, 앞과 뒤가 막혀있지 않음.
     가로 저장방식, 앞, 뒤(front/back, rear)의 개념
     FIFO, 먼저 저장구조에 들어온 데이터가 먼저 삭제되는 특징을 가지고 있음.

2) 비선형구조 - 선형구조가 아닌 저장방식
- 트리(포함관계, 대소관계, 부모자식관계, 상하관계), (깊이 우선 탐색구현시 사용, Depth First Search, DFS)
- 그래프(다양한 연결, 관계성 표현), (너비 우선 탐색구현시 사용, Breadth First Search, BFS)


3. String s =”apple”;
- 주소가 동일한지 비교 ==, 값이 동일한지 비교 equals()
- 일부 String을 추출할 때, substring(3); //3부터시작해서 끝까지, substring(2, 4); //2 ~3
- length- 배열, length()- String, size()- 컬렉션(list, map, stack,...)
- indexOf(“a”)- 0
- String의 값을 자주 변경하는 경우 사용하면 좋지 않다.
  s = “melon”; - 값을 변경하는 경우, “apple”을 놔두고 새로운 공간을 만들어서 “melon”을 넣고, s에 새로운 공간의 주소를 넣는 방식이기 때문.
  값이 변경이 자주 있는 경우 메모리 관리가 비효율적, 변경이 적은 경우 사용하면 좋음.

  값의 변경이 잦을 경우 StringBuilder 사용!


4. 추가적인 컬렉션 
1)set - 중복X
2)list - 순서
3)map - 키+값의 쌍으로 저장, 키와 값은 모든 타입을 다 사용 가능
	map.put(“apple”, “사과"); map.put(1,”아빠"); → key로 사용되는 것은 중복X
4)queue - FIFO, front <-> back(rear)
5)stack - LIFO, 값을 넣을 때: push(값), 값을 꺼낼 때: pop(), top(up) <-> bottom


5. 알고리즘
- 방법을 정의해 놓은 것
- 방법(알고리즘) 중에서 선택해서 문제를 해결해야 함.
- 선택의 기준: 시간 적게(cpu) + 공간을 적게(ram)
- 복잡도: 시간복잡도 > 공간복잡도
- 빅오표기법: 대문자 O표기법, 최악의 경우의 성능을 표현
- {1,2,3}, {3.,2,1}: 데이터의 구성에 따라서 같은 알고리즘을 써도 복잡도의 차이가 있음.
- 가장 빠른 방법 O(1) → O(logN) →  O(N) → O(NlogN) → O(N^2) 가장 느린 방법


- 배열과 for문은 함께 많이 사용됨.
- for문 안에 for문을 쓸 수 있다?(O)
- for문 안에 if문을 쓸 수 있다?(O)
- c타입의 for문, for-each문 
- 정렬알고리즘: 버블(가장 느림), 선택, 삽입, 퀵(기준값(피벗)에 따라 피벗보다 작은 것은 왼쪽, 큰것은 오른쪽으로 swap, 가장 빠름)
- 검색알고리즘: 이진검색(O(logN))
- 순서도로 알고리즘을 정리하면 한눈에 정리해 볼 수 있다.
- 직사각형: 처리, 종이찢어진 모양: 처리결과 출력, 다이아몬드 모양: 조건(분기)처리 → 조건의 결과에 따라 true/false로 처리 가능
